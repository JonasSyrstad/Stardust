 

// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
//
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using BrightstarDB.Client;
using BrightstarDB.EntityFramework;

using System.ComponentModel.DataAnnotations;
using Stardust.Interstellar.ConfigurationReader;
using JetBrains.Annotations;
using Stardust.Particles;
using System.ComponentModel;

namespace Stardust.Starterkit.Configuration.Repository 
{
    public partial class ConfigurationContext : BrightstarEntityContext {
    	
    	static ConfigurationContext() 
    	{
    		var provider = new ReflectionMappingProvider();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IConfigSet));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IConfigSet, Stardust.Starterkit.Configuration.Repository.ConfigSet>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IConfigUser));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IConfigUser, Stardust.Starterkit.Configuration.Repository.ConfigUser>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IEndpoint));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IEndpoint, Stardust.Starterkit.Configuration.Repository.Endpoint>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IEndpointParameter));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IEndpointParameter, Stardust.Starterkit.Configuration.Repository.EndpointParameter>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IEnvironment));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IEnvironment, Stardust.Starterkit.Configuration.Repository.Environment>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.ICacheSettings));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.ICacheSettings, Stardust.Starterkit.Configuration.Repository.CacheSettings>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter, Stardust.Starterkit.Configuration.Repository.EnvironmentParameter>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IServiceDescription));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IServiceDescription, Stardust.Starterkit.Configuration.Repository.ServiceDescription>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IServiceHostParameter));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter, Stardust.Starterkit.Configuration.Repository.ServiceHostParameter>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.IServiceHostSettings));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings, Stardust.Starterkit.Configuration.Repository.ServiceHostSettings>();
    		provider.AddMappingsForType(EntityMappingStore.Instance, typeof(Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter));
    		EntityMappingStore.Instance.SetImplMapping<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter, Stardust.Starterkit.Configuration.Repository.SubstitutionParameter>();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified BrightstarDB
    	/// Data Object Store connection
    	/// </summary>
    	/// <param name="dataObjectStore">The connection to the BrightstarDB Data Object Store that will provide the entity objects</param>
    	public ConfigurationContext(IDataObjectStore dataObjectStore) : base(dataObjectStore)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar connection string
    	/// </summary>
    	/// <param name="connectionString">The connection to be used to connect to an existing BrightstarDB store</param>
    	/// <param name="enableOptimisticLocking">OPTIONAL: If set to true optmistic locking will be applied to all entity updates</param>
        /// <param name="updateGraphUri">OPTIONAL: The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// not defined, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">OPTIONAL: The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If not defined, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">OPTIONAL: The URI identifier of the graph that contains version number statements for entities. 
        /// If not defined, the <paramref name="updateGraphUri"/> will be used.</param>
    	public ConfigurationContext(
    	    string connectionString, 
    		bool? enableOptimisticLocking=null,
    		string updateGraphUri = null,
    		IEnumerable<string> datasetGraphUris = null,
    		string versionGraphUri = null
        ) : base(connectionString, enableOptimisticLocking, updateGraphUri, datasetGraphUris, versionGraphUri)
    	{
    		InitializeContext();
    	}
    
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration.
    	/// </summary>
    	public ConfigurationContext() : base()
    	{
    		InitializeContext();
    	}
    	
    	/// <summary>
    	/// Initialize a new entity context using the specified Brightstar
    	/// connection string retrieved from the configuration and the
    	//  specified target graphs
    	/// </summary>
        /// <param name="updateGraphUri">The URI identifier of the graph to be updated with any new triples created by operations on the store. If
        /// set to null, the default graph in the store will be updated.</param>
        /// <param name="datasetGraphUris">The URI identifiers of the graphs that will be queried to retrieve entities and their properties.
        /// If set to null, all graphs in the store will be queried.</param>
        /// <param name="versionGraphUri">The URI identifier of the graph that contains version number statements for entities. 
        /// If set to null, the value of <paramref name="updateGraphUri"/> will be used.</param>
    	public ConfigurationContext(
    		string updateGraphUri,
    		IEnumerable<string> datasetGraphUris,
    		string versionGraphUri
    	) : base(updateGraphUri:updateGraphUri, datasetGraphUris:datasetGraphUris, versionGraphUri:versionGraphUri)
    	{
    		InitializeContext();
    	}
    	
    	private void InitializeContext() 
    	{
    		ConfigSets = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IConfigSet>(this);
    		ConfigUsers = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IConfigUser>(this);
    		Endpoints = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IEndpoint>(this);
    		EndpointParameters = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IEndpointParameter>(this);
    		Environments = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IEnvironment>(this);
    		CacheSettingss = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.ICacheSettings>(this);
    		EnvironmentParameters = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter>(this);
    		ServiceDescriptions = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IServiceDescription>(this);
    		ServiceHostParameters = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter>(this);
    		ServiceHostSettingss = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>(this);
    		SubstitutionParameters = 	new BrightstarEntitySet<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter>(this);
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IConfigSet> ConfigSets
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IConfigUser> ConfigUsers
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IEndpoint> Endpoints
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IEndpointParameter> EndpointParameters
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IEnvironment> Environments
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.ICacheSettings> CacheSettingss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter> EnvironmentParameters
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IServiceDescription> ServiceDescriptions
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter> ServiceHostParameters
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings> ServiceHostSettingss
    	{
    		get; private set;
    	}
    	
    	public IEntitySet<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter> SubstitutionParameters
    	{
    		get; private set;
    	}
    	
        public IEntitySet<T> EntitySet<T>() where T : class {
            var itemType = typeof(T);
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IConfigSet))) {
                return (IEntitySet<T>)this.ConfigSets;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IConfigUser))) {
                return (IEntitySet<T>)this.ConfigUsers;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IEndpoint))) {
                return (IEntitySet<T>)this.Endpoints;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IEndpointParameter))) {
                return (IEntitySet<T>)this.EndpointParameters;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IEnvironment))) {
                return (IEntitySet<T>)this.Environments;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.ICacheSettings))) {
                return (IEntitySet<T>)this.CacheSettingss;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter))) {
                return (IEntitySet<T>)this.EnvironmentParameters;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IServiceDescription))) {
                return (IEntitySet<T>)this.ServiceDescriptions;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IServiceHostParameter))) {
                return (IEntitySet<T>)this.ServiceHostParameters;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.IServiceHostSettings))) {
                return (IEntitySet<T>)this.ServiceHostSettingss;
            }
            if (typeof(T).Equals(typeof(Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter))) {
                return (IEntitySet<T>)this.SubstitutionParameters;
            }
            throw new InvalidOperationException(typeof(T).FullName + " is not a recognized entity interface type.");
        }
    
        } // end class ConfigurationContext
        
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class ConfigSet : BrightstarEntityObject, IConfigSet 
    {
    	public ConfigSet(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ConfigSet(BrightstarEntityContext context) : base(context, typeof(ConfigSet)) { }
    	public ConfigSet() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IConfigSet
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String System
    	{
            		get { return GetRelatedProperty<System.String>("System"); }
            		set { SetRelatedProperty("System", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEnvironment> Environments
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEnvironment>("Environments"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Environments", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings> ServiceHosts
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("ServiceHosts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ServiceHosts", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceDescription> Services
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceDescription>("Services"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Services", value); }
    								}
    
    	public Stardust.Starterkit.Configuration.Repository.IConfigSet ParentConfigSet
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ParentConfigSet"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ParentConfigSet", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IConfigSet> ChildConfigSets
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ChildConfigSets"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildConfigSets", value); }
    								}
    
    	public System.DateTime Created
    	{
            		get { return GetRelatedProperty<System.DateTime>("Created"); }
            		set { SetRelatedProperty("Created", value); }
    	}
    
    	public System.DateTime LastUpdate
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastUpdate"); }
            		set { SetRelatedProperty("LastUpdate", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IConfigUser> Administrators
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IConfigUser>("Administrators"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Administrators", value); }
    								}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public System.String LayerNames
    	{
            		get { return GetRelatedProperty<System.String>("LayerNames"); }
            		set { SetRelatedProperty("LayerNames", value); }
    	}
    
    	public System.String ReaderKey
    	{
            		get { return GetRelatedProperty<System.String>("ReaderKey"); }
            		set { SetRelatedProperty("ReaderKey", value); }
    	}
    
    	public System.Boolean AllowAccessWithRootKey
    	{
            		get { return GetRelatedProperty<System.Boolean>("AllowAccessWithRootKey"); }
            		set { SetRelatedProperty("AllowAccessWithRootKey", value); }
    	}
    
    	public System.Boolean AllowAccessWithUserTokens
    	{
            		get { return GetRelatedProperty<System.Boolean>("AllowAccessWithUserTokens"); }
            		set { SetRelatedProperty("AllowAccessWithUserTokens", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class ConfigUser : BrightstarEntityObject, IConfigUser 
    {
    	public ConfigUser(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ConfigUser(BrightstarEntityContext context) : base(context, typeof(ConfigUser)) { }
    	public ConfigUser() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IConfigUser
    
    	public System.String NameId
    	{
            		get { return GetRelatedProperty<System.String>("NameId"); }
            		set { SetRelatedProperty("NameId", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IConfigSet> ConfigSet
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ConfigSet"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ConfigSet", value); }
    								}
    
    	public System.String FirstName
    	{
            		get { return GetRelatedProperty<System.String>("FirstName"); }
            		set { SetRelatedProperty("FirstName", value); }
    	}
    
    	public System.String LastName
    	{
            		get { return GetRelatedProperty<System.String>("LastName"); }
            		set { SetRelatedProperty("LastName", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.AdministratorTypes AdministratorType
    	{
            		get { return GetRelatedProperty<Stardust.Starterkit.Configuration.Repository.AdministratorTypes>("AdministratorType"); }
            		set { SetRelatedProperty("AdministratorType", value); }
    	}
    
    	public System.String AccessToken
    	{
            		get { return GetRelatedProperty<System.String>("AccessToken"); }
            		set { SetRelatedProperty("AccessToken", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class Endpoint : BrightstarEntityObject, IEndpoint 
    {
    	public Endpoint(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Endpoint(BrightstarEntityContext context) : base(context, typeof(Endpoint)) { }
    	public Endpoint() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IEndpoint
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String ServiceNameId
    	{
            		get { return GetRelatedProperty<System.String>("ServiceNameId"); }
            		set { SetRelatedProperty("ServiceNameId", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEndpoint> ChildEndpoints
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEndpoint>("ChildEndpoints"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildEndpoints", value); }
    								}
    
    	public Stardust.Starterkit.Configuration.Repository.IEndpoint ParentEndpoint
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEndpoint>("ParentEndpoint"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEndpoint>("ParentEndpoint", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IServiceDescription ServiceDescription
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceDescription>("ServiceDescription"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceDescription>("ServiceDescription", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEndpointParameter> Parameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEndpointParameter>("Parameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Parameters", value); }
    								}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class EndpointParameter : BrightstarEntityObject, IEndpointParameter 
    {
    	public EndpointParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public EndpointParameter(BrightstarEntityContext context) : base(context, typeof(EndpointParameter)) { }
    	public EndpointParameter() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IEndpointParameter
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IEndpoint Endpoint
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEndpoint>("Endpoint"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEndpoint>("Endpoint", value); }
    	}
    
    	public System.String EndpointNameId
    	{
            		get { return GetRelatedProperty<System.String>("EndpointNameId"); }
            		set { SetRelatedProperty("EndpointNameId", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IEndpointParameter Parent
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEndpointParameter>("Parent"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEndpointParameter>("Parent", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEndpointParameter> ChildParameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEndpointParameter>("ChildParameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
    								}
    
    	public System.String ItemValue
    	{
            		get { return GetRelatedProperty<System.String>("ItemValue"); }
            		set { SetRelatedProperty("ItemValue", value); }
    	}
    	
    	[System.ComponentModel.DisplayNameAttribute("Environmental")]
    	public System.Boolean ConfigurableForEachEnvironment
    	{
            		get { return GetRelatedProperty<System.Boolean>("ConfigurableForEachEnvironment"); }
            		set { SetRelatedProperty("ConfigurableForEachEnvironment", value); }
    	}
    
    	public System.Boolean IsPerService
    	{
            		get { return GetRelatedProperty<System.Boolean>("IsPerService"); }
            		set { SetRelatedProperty("IsPerService", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class Environment : BrightstarEntityObject, IEnvironment 
    {
    	public Environment(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public Environment(BrightstarEntityContext context) : base(context, typeof(Environment)) { }
    	public Environment() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IEnvironment
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String ConfigSetNameId
    	{
            		get { return GetRelatedProperty<System.String>("ConfigSetNameId"); }
            		set { SetRelatedProperty("ConfigSetNameId", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IConfigSet ConfigSet
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ConfigSet"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ConfigSet", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IEnvironment ParentEnvironment
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("ParentEnvironment"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("ParentEnvironment", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEnvironment> ChildEnvironments
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEnvironment>("ChildEnvironments"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildEnvironments", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter> SubstitutionParameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter>("SubstitutionParameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("SubstitutionParameters", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter> EnvironmentParameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter>("EnvironmentParameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("EnvironmentParameters", value); }
    								}
    
    	public Stardust.Starterkit.Configuration.Repository.ICacheSettings CacheType
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.ICacheSettings>("CacheType"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.ICacheSettings>("CacheType", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public System.String ReaderKey
    	{
            		get { return GetRelatedProperty<System.String>("ReaderKey"); }
            		set { SetRelatedProperty("ReaderKey", value); }
    	}
    
    	public System.String ETag
    	{
            		get { return GetRelatedProperty<System.String>("ETag"); }
            		set { SetRelatedProperty("ETag", value); }
    	}
    	
    	[System.ComponentModel.DisplayNameAttribute("Last updated")]
    	public System.DateTime LastPublish
    	{
            		get { return GetRelatedProperty<System.DateTime>("LastPublish"); }
            		set { SetRelatedProperty("LastPublish", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class CacheSettings : BrightstarEntityObject, ICacheSettings 
    {
    	public CacheSettings(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public CacheSettings(BrightstarEntityContext context) : base(context, typeof(CacheSettings)) { }
    	public CacheSettings() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.ICacheSettings
    
    	public System.String CacheImplementation
    	{
            		get { return GetRelatedProperty<System.String>("CacheImplementation"); }
            		set { SetRelatedProperty("CacheImplementation", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IEnvironment Environment
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("Environment"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("Environment", value); }
    	}
    
    	public System.Boolean NotifyOnChange
    	{
            		get { return GetRelatedProperty<System.Boolean>("NotifyOnChange"); }
            		set { SetRelatedProperty("NotifyOnChange", value); }
    	}
    
    	public System.String CacheName
    	{
            		get { return GetRelatedProperty<System.String>("CacheName"); }
            		set { SetRelatedProperty("CacheName", value); }
    	}
    	
    	[System.ComponentModel.DisplayNameAttribute("Machine names")]
    	public System.String MachineNames
    	{
            		get { return GetRelatedProperty<System.String>("MachineNames"); }
            		set { SetRelatedProperty("MachineNames", value); }
    	}
    
    	public System.Int32 Port
    	{
            		get { return GetRelatedProperty<System.Int32>("Port"); }
            		set { SetRelatedProperty("Port", value); }
    	}
    
    	public System.Boolean Secure
    	{
            		get { return GetRelatedProperty<System.Boolean>("Secure"); }
            		set { SetRelatedProperty("Secure", value); }
    	}
    
    	public System.String PassPhrase
    	{
            		get { return GetRelatedProperty<System.String>("PassPhrase"); }
            		set { SetRelatedProperty("PassPhrase", value); }
    	}
    
    	public System.String SecurityMode
    	{
            		get { return GetRelatedProperty<System.String>("SecurityMode"); }
            		set { SetRelatedProperty("SecurityMode", value); }
    	}
    
    	public System.String ProtectionLevel
    	{
            		get { return GetRelatedProperty<System.String>("ProtectionLevel"); }
            		set { SetRelatedProperty("ProtectionLevel", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class EnvironmentParameter : BrightstarEntityObject, IEnvironmentParameter 
    {
    	public EnvironmentParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public EnvironmentParameter(BrightstarEntityContext context) : base(context, typeof(EnvironmentParameter)) { }
    	public EnvironmentParameter() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String EnvironmentNameId
    	{
            		get { return GetRelatedProperty<System.String>("EnvironmentNameId"); }
            		set { SetRelatedProperty("EnvironmentNameId", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IEnvironment Environment
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("Environment"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("Environment", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter Parent
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter>("Parent"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter>("Parent", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter> ChildParameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEnvironmentParameter>("ChildParameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
    								}
    
    	public System.String ItemValue
    	{
            		get { return GetRelatedProperty<System.String>("ItemValue"); }
            		set { SetRelatedProperty("ItemValue", value); }
    	}
    
    	public System.Boolean IsSecureString
    	{
            		get { return GetRelatedProperty<System.Boolean>("IsSecureString"); }
            		set { SetRelatedProperty("IsSecureString", value); }
    	}
    
    	public System.Byte[] BinaryValue
    	{
            		get { return GetRelatedProperty<System.Byte[]>("BinaryValue"); }
            		set { SetRelatedProperty("BinaryValue", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class ServiceDescription : BrightstarEntityObject, IServiceDescription 
    {
    	public ServiceDescription(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ServiceDescription(BrightstarEntityContext context) : base(context, typeof(ServiceDescription)) { }
    	public ServiceDescription() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IServiceDescription
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    	
    	[System.ComponentModel.DisplayNameAttribute("Client endpoint")]
    	public System.String ClientEndpointValue
    	{
            		get { return GetRelatedProperty<System.String>("ClientEndpointValue"); }
            		set { SetRelatedProperty("ClientEndpointValue", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IConfigSet ConfigSet
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ConfigSet"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ConfigSet", value); }
    	}
    
    	public System.String ConfigSetNameId
    	{
            		get { return GetRelatedProperty<System.String>("ConfigSetNameId"); }
            		set { SetRelatedProperty("ConfigSetNameId", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceDescription> ChildServiceDescriptions
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceDescription>("ChildServiceDescriptions"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildServiceDescriptions", value); }
    								}
    
    	public Stardust.Starterkit.Configuration.Repository.IServiceDescription PatentServiceDescription
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceDescription>("PatentServiceDescription"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceDescription>("PatentServiceDescription", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IEndpoint> Endpoints
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IEndpoint>("Endpoints"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Endpoints", value); }
    								}
    
    	public Stardust.Starterkit.Configuration.Repository.IServiceHostSettings ServiceHost
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("ServiceHost"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("ServiceHost", value); }
    	}
    
    	public System.String ServiceHostId
    	{
            		get { return GetRelatedProperty<System.String>("ServiceHostId"); }
            		set { SetRelatedProperty("ServiceHostId", value); }
    	}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class ServiceHostParameter : BrightstarEntityObject, IServiceHostParameter 
    {
    	public ServiceHostParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ServiceHostParameter(BrightstarEntityContext context) : base(context, typeof(ServiceHostParameter)) { }
    	public ServiceHostParameter() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IServiceHostParameter
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String ServiceHostSettingsNameId
    	{
            		get { return GetRelatedProperty<System.String>("ServiceHostSettingsNameId"); }
            		set { SetRelatedProperty("ServiceHostSettingsNameId", value); }
    	}
    
    	public System.Boolean IsSecureString
    	{
            		get { return GetRelatedProperty<System.Boolean>("IsSecureString"); }
            		set { SetRelatedProperty("IsSecureString", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IServiceHostSettings ServiceHost
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("ServiceHost"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("ServiceHost", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IServiceHostParameter Parent
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter>("Parent"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter>("Parent", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter> ChildParameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter>("ChildParameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
    								}
    
    	public System.String ItemValue
    	{
            		get { return GetRelatedProperty<System.String>("ItemValue"); }
            		set { SetRelatedProperty("ItemValue", value); }
    	}
    
    	public System.Byte[] BinaryValue
    	{
            		get { return GetRelatedProperty<System.Byte[]>("BinaryValue"); }
            		set { SetRelatedProperty("BinaryValue", value); }
    	}
    
    	public System.Boolean IsEnvironmental
    	{
            		get { return GetRelatedProperty<System.Boolean>("IsEnvironmental"); }
            		set { SetRelatedProperty("IsEnvironmental", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class ServiceHostSettings : BrightstarEntityObject, IServiceHostSettings 
    {
    	public ServiceHostSettings(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public ServiceHostSettings(BrightstarEntityContext context) : base(context, typeof(ServiceHostSettings)) { }
    	public ServiceHostSettings() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.IServiceHostSettings
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IConfigSet ConfigSet
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ConfigSet"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IConfigSet>("ConfigSet", value); }
    	}
    
    	public System.String ConfigSetNameId
    	{
            		get { return GetRelatedProperty<System.String>("ConfigSetNameId"); }
            		set { SetRelatedProperty("ConfigSetNameId", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IServiceHostSettings Parent
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("Parent"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("Parent", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings> Children
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("Children"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Children", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter> Parameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceHostParameter>("Parameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Parameters", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceDescription> Services
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceDescription>("Services"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("Services", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings> UpstreamHosts
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("UpstreamHosts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("UpstreamHosts", value); }
    								}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings> DownstreamHosts
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.IServiceHostSettings>("DownstreamHosts"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("DownstreamHosts", value); }
    								}
    
    	public System.String Description
    	{
            		get { return GetRelatedProperty<System.String>("Description"); }
            		set { SetRelatedProperty("Description", value); }
    	}
    
    	public System.String Visualization
    	{
            		get { return GetRelatedProperty<System.String>("Visualization"); }
            		set { SetRelatedProperty("Visualization", value); }
    	}
    
    	public System.Int32 Level
    	{
            		get { return GetRelatedProperty<System.Int32>("Level"); }
            		set { SetRelatedProperty("Level", value); }
    	}
    
    	public System.String Alias
    	{
            		get { return GetRelatedProperty<System.String>("Alias"); }
            		set { SetRelatedProperty("Alias", value); }
    	}
    	#endregion
    }
}
namespace Stardust.Starterkit.Configuration.Repository 
{
    
    public partial class SubstitutionParameter : BrightstarEntityObject, ISubstitutionParameter 
    {
    	public SubstitutionParameter(BrightstarEntityContext context, BrightstarDB.Client.IDataObject dataObject) : base(context, dataObject) { }
        public SubstitutionParameter(BrightstarEntityContext context) : base(context, typeof(SubstitutionParameter)) { }
    	public SubstitutionParameter() : base() { }
    	public System.String Id { get {return GetKey(); } set { SetKey(value); } }
    	#region Implementation of Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter
    	
    	[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(Constants.KeyValidator, ErrorMessage="special characters are not  allowed.")]
    	public System.String Name
    	{
            		get { return GetRelatedProperty<System.String>("Name"); }
            		set { SetRelatedProperty("Name", value); }
    	}
    
    	public System.String EnvironmentNameId
    	{
            		get { return GetRelatedProperty<System.String>("EnvironmentNameId"); }
            		set { SetRelatedProperty("EnvironmentNameId", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.IEnvironment Environment
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("Environment"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.IEnvironment>("Environment", value); }
    	}
    
    	public Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter Parent
    	{
            get { return GetRelatedObject<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter>("Parent"); }
            set { SetRelatedObject<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter>("Parent", value); }
    	}
    	public System.Collections.Generic.ICollection<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter> ChildParameters
    	{
    		get { return GetRelatedObjects<Stardust.Starterkit.Configuration.Repository.ISubstitutionParameter>("ChildParameters"); }
    		set { if (value == null) throw new ArgumentNullException("value"); SetRelatedObjects("ChildParameters", value); }
    								}
    
    	public System.String ItemValue
    	{
            		get { return GetRelatedProperty<System.String>("ItemValue"); }
            		set { SetRelatedProperty("ItemValue", value); }
    	}
    
    	public System.Boolean IsSecure
    	{
            		get { return GetRelatedProperty<System.Boolean>("IsSecure"); }
            		set { SetRelatedProperty("IsSecure", value); }
    	}
    	#endregion
    }
}

using System;
using System.Text;

namespace Stardust.Accretion
{
    internal class WriterContext : ICodeWriterContext, ICodeFileWriterContext
    {
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>
        /// A string that represents the current object.
        /// </returns>
        public override string ToString()
        {
            return builder.ToString();
        }

        private StringBuilder builder;

        private readonly int indentationLevel;

        private readonly string _name;

        /// <summary>
        /// Initializes a new instance of the <see cref="T:System.Object"/> class.
        /// </summary>
        internal WriterContext(StringBuilder builder, int indentationLevel, string name)
        {
            this.builder = builder;
            this.indentationLevel = indentationLevel;
            this._name = name;
        }

        internal WriterContext(StringBuilder builder, int indentationLevel)
        {
            this.builder = builder;
            this.indentationLevel = indentationLevel;
        }

        internal WriterContext()
        {
            builder = new StringBuilder();
        }

        public ICodeFileWriterContext Using(string @namespace)
        {
            builder.AppendLine(string.Format("using {0};", @namespace));
            return this;
        }

        public ICodeWriterContext DeclareNamespace(string @namespace, Action<ICodeWriterContext> body)
        {
            builder.AppendLine();
            builder.AppendIndentedLine(indentationLevel, string.Format("namespace {0}", @namespace));
            builder.AppendIndentedLine(indentationLevel, "{");
            body(CreateChild());
            builder.AppendIndentedLine(indentationLevel, "}");
            builder.AppendLine();
            return this;
        }

        public ICodeFileWriterContext AddGeneratorHeader()
        {
            Header(builder);
            return this;
        }

        public static StringBuilder Header(StringBuilder stringBuilder)
        {
            return
                AddSeparatorLine(
                    AddSeparatorLine(stringBuilder)
                        .AppendLine("// <auto-generated>")
                        .AppendLine("//     This code was generated by a tool.")
                        .AppendLine(string.Format("//     Runtime Version:{0}", System.Environment.Version))
                        .AppendLine("//")
                        .AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if")
                        .AppendLine("//     the code is regenerated.")
                        .AppendLine("//")
                        .AppendLine("//     contact jonas.syrstad@evry.com/jonas.syrstad@dnvgl.com for support and help with the tool")
                        .AppendLine("// </auto-generated>"));

        }

        public static StringBuilder AddSeparatorLine( StringBuilder stringBuilder)
        {
            stringBuilder.AppendLine("//-----------------------------------------------------------------------------");
            return stringBuilder;
        }

        public ICodeFileWriterContext Class(string name, Action<ICodeWriterContext> body)
        {
            builder.AppendIndentedLine(indentationLevel, string.Format("public partial class {0}", name));
            BaseBlock(body, name);
            builder.AppendLine();
            return this;
        }

        public ICodeFileWriterContext Interface(string name, Action<ICodeWriterContext> body)
        {
            builder.AppendIndentedLine(indentationLevel, string.Format("public interface {0}", name));
            BaseBlock(body, name);
            builder.AppendLine();
            return this;
        }

        public ICodeWriterContext InternalCtor()
        {
            builder.AppendIndentedLine(indentationLevel, string.Format("internal {0}() {{}}", _name));
            return this;
        }

        public ICodeWriterContext Property<T>(string name, Action<ICodeWriterContext> get, Action<ICodeWriterContext> set)
        {
            return Property(typeof(T).Name, name, get, set);
        }

        public void Return(string code)
        {
            builder.AppendIndentedLine(indentationLevel, string.Format("return {0}{1}", code, (code.EndsWith(";") ? "" : ";")));
        }

        public void Var(string name, string value)
        {
            builder.AppendIndentedLine(indentationLevel, string.Format("var {0} = {1};", name, value));
        }

        public ICodeWriterContext If(string clause, Action<ICodeWriterContext> body)
        {
            var block = string.Format("if({0})", clause);
            Block(body, block);
            return this;
        }

        public ICodeWriterContext ElseIf(string clause, Action<ICodeWriterContext> body)
        {
            var block = string.Format("else if({0})", clause);
            Block(body, block);
            return this;
        }

        public void Else(Action<ICodeWriterContext> body)
        {
            Block(body, "else");
        }

        public void Field(string type, string name, string initializer)
        {
            builder.AppendIndentedLine(indentationLevel, initializer != null ? string.Format("private {0} {1} = {2};", type, name, initializer) : string.Format("{0} {1};", type, name));
        }

        public void InitializedField(string type, string name)
        {
            Field(type,name,string.Format("new {0}()",type));
        }

        public void AssignVariable(string variableName, string assignmentStatement)
        {
            builder.AppendIndentedLine(indentationLevel, String.Format("{0}={1};", variableName, assignmentStatement));
        }

        public ICodeFileWriterContext StaticClass(string name, Action<ICodeWriterContext> body)
        {
            builder.AppendIndentedLine(indentationLevel, string.Format("public static class {0}", name));
            BaseBlock(body, name);
            builder.AppendLine();
            return this;
        }

        public void ExtMethod(string returnType, string name, string thisParam, Action<ICodeWriterContext> body)
        {
            //builder.AppendIndentedLine(indentationLevel, string.Format("public static {0} {1}(this {2} extendedItem)", returnType, name, thisParam));
            Block(body, string.Format("public static {0} {1}(this {2} extendedItem)", returnType, name, thisParam));
        }

        ICodeWriterContext ICodeWriterContext.Attribute(string attributeType)
        {
            throw new NotImplementedException();
        }

        public void IMethod(string toProperCase, string input, string output)
        {
            throw new NotImplementedException();
        }

        public void Attribute(string attributeType)
        {
            builder.AppendIndentedLine(indentationLevel, string.Format("[{0}]", attributeType));
        }

        private void Block(Action<ICodeWriterContext> body, string block)
        {
            builder.AppendIndentedLine(indentationLevel, block);
            BaseBlock(body);
        }

        private void BaseBlock(Action<ICodeWriterContext> body, string name = null)
        {
            builder.AppendIndentedLine(indentationLevel, "{");
            if (body != null)
                body(CreateChild(name));
            builder.AppendIndentedLine(indentationLevel, "}");
        }

        private void BaseBlock(Action<ICodeFileWriterContext> body)
        {
            builder.AppendIndentedLine(indentationLevel, "{");
            body(CreateChild());
            builder.AppendIndentedLine(indentationLevel, "}");
        }

        public ICodeWriterContext Property(string type, string name, Action<ICodeWriterContext> get, Action<ICodeWriterContext> set)
        {


            if (get == null && set == null)
            {
                builder.AppendIndentedLine(indentationLevel, String.Format("public {0} {1} {{get; set;}}", type, name));
                return this;
            }
            builder.AppendIndentedLine(indentationLevel, String.Format("public {0} {1}", type, name));
            builder.AppendIndentedLine(indentationLevel, "{");
            if (get != null)
                AddPropertyBody(get, "get");
            if (set != null)
                AddPropertyBody(set, "set");
            builder.AppendIndentedLine(indentationLevel, "}");
            return this;
        }

        private void AddPropertyBody(Action<ICodeWriterContext> body, string getSet)
        {
            builder.AppendIndentedLine(indentationLevel + 1, getSet);
            builder.AppendIndentedLine(indentationLevel + 1, "{");
            body(new WriterContext(builder, indentationLevel + 2));
            builder.AppendIndentedLine(indentationLevel + 1, "}");
        }

        private WriterContext CreateChild(string name = null)
        {
            return new WriterContext(builder, indentationLevel + 1, name);
        }
    }
}
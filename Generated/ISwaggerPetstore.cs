// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MyNamespace
{
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading;
    using System.Threading.Tasks;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// A sample API that uses a petstore as an example to demonstrate
    /// features in the swagger-2.0 specification
    /// </summary>
    public partial interface ISwaggerPetstore : IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }


            /// <summary>
        /// Returns all pets from the system that the user has access to
        /// Nam sed condimentum est. Maecenas tempor sagittis sapien, nec
        /// rhoncus sem sagittis sit amet. Aenean at gravida augue, ac
        /// iaculis sem. Curabitur odio lorem, ornare eget elementum nec,
        /// cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt
        /// varius justo. In hac habitasse platea dictumst. Integer at
        /// adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante
        /// molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non
        /// tortor eleifend sagittis. Praesent at enim pharetra urna volutpat
        /// venenatis eget eget mauris. In eleifend fermentum facilisis.
        /// Praesent enim enim, gravida ac sodales sed, placerat id erat.
        /// Suspendisse lacus dolor, consectetur non augue vel, vehicula
        /// interdum libero. Morbi euismod sagittis libero sed lacinia.
        /// 
        /// Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit
        /// nisl, eu condimentum ligula luctus nec. Phasellus semper velit
        /// eget aliquet faucibus. In a mattis elit. Phasellus vel urna
        /// viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque
        /// posuere elementum. Sed a varius odio. Morbi rhoncus ligula
        /// libero, vel eleifend nunc tristique vitae. Fusce et sem dui.
        /// Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel
        /// tempus. Quisque mollis felis eu dolor tristique, sit amet auctor
        /// felis gravida. Sed libero lorem, molestie sed nisl in, accumsan
        /// tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel
        /// eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit
        /// eu, euismod sapien.
        /// </summary>
        /// <param name='tags'>
        /// tags to filter by
        /// </param>
        /// <param name='limit'>
        /// maximum number of results to return
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<IList<Pet>>> FindPetsWithHttpMessagesAsync(IList<string> tags = default(IList<string>), int? limit = default(int?), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Creates a new pet in the store.  Duplicates are allowed
        /// </summary>
        /// <param name='pet'>
        /// Pet to add to the store
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Pet>> AddPetWithHttpMessagesAsync(NewPet pet, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Returns a user based on a single ID, if the user does not have
        /// access to the pet
        /// </summary>
        /// <param name='id'>
        /// ID of pet to fetch
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<Pet>> FindpetbyidWithHttpMessagesAsync(long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// deletes a single pet based on the ID supplied
        /// </summary>
        /// <param name='id'>
        /// ID of pet to delete
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse> DeletePetWithHttpMessagesAsync(long id, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}

// Code generated by Microsoft (R) AutoRest Code Generator 0.15.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MyNamespace
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for SwaggerPetstore.
    /// </summary>
    public static partial class SwaggerPetstoreExtensions
    {
            /// <summary>
            /// Returns all pets from the system that the user has access to
            /// Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem
            /// sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur
            /// odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis,
            /// pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea
            /// dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra
            /// tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit
            /// non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat
            /// venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent
            /// enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus
            /// dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod
            /// sagittis libero sed lacinia.
            /// 
            /// Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu
            /// condimentum ligula luctus nec. Phasellus semper velit eget aliquet
            /// faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem
            /// id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio.
            /// Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et
            /// sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna
            /// vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor
            /// felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor
            /// nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem.
            /// Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tags'>
            /// tags to filter by
            /// </param>
            /// <param name='limit'>
            /// maximum number of results to return
            /// </param>
            public static IList<Pet> FindPets(this ISwaggerPetstore operations, IList<string> tags = default(IList<string>), int? limit = default(int?))
            {
                return Task.Factory.StartNew(s => ((ISwaggerPetstore)s).FindPetsAsync(tags, limit), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all pets from the system that the user has access to
            /// Nam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem
            /// sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur
            /// odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis,
            /// pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea
            /// dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra
            /// tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit
            /// non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat
            /// venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent
            /// enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus
            /// dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod
            /// sagittis libero sed lacinia.
            /// 
            /// Sed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu
            /// condimentum ligula luctus nec. Phasellus semper velit eget aliquet
            /// faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem
            /// id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio.
            /// Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et
            /// sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna
            /// vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor
            /// felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor
            /// nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem.
            /// Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='tags'>
            /// tags to filter by
            /// </param>
            /// <param name='limit'>
            /// maximum number of results to return
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Pet>> FindPetsAsync(this ISwaggerPetstore operations, IList<string> tags = default(IList<string>), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindPetsWithHttpMessagesAsync(tags, limit, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new pet in the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pet'>
            /// Pet to add to the store
            /// </param>
            public static Pet AddPet(this ISwaggerPetstore operations, NewPet pet)
            {
                return Task.Factory.StartNew(s => ((ISwaggerPetstore)s).AddPetAsync(pet), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new pet in the store.  Duplicates are allowed
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pet'>
            /// Pet to add to the store
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pet> AddPetAsync(this ISwaggerPetstore operations, NewPet pet, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPetWithHttpMessagesAsync(pet, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a user based on a single ID, if the user does not have access to
            /// the pet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// ID of pet to fetch
            /// </param>
            public static Pet Findpetbyid(this ISwaggerPetstore operations, long id)
            {
                return Task.Factory.StartNew(s => ((ISwaggerPetstore)s).FindpetbyidAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a user based on a single ID, if the user does not have access to
            /// the pet
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// ID of pet to fetch
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Pet> FindpetbyidAsync(this ISwaggerPetstore operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FindpetbyidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// deletes a single pet based on the ID supplied
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// ID of pet to delete
            /// </param>
            public static void DeletePet(this ISwaggerPetstore operations, long id)
            {
                Task.Factory.StartNew(s => ((ISwaggerPetstore)s).DeletePetAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// deletes a single pet based on the ID supplied
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// ID of pet to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeletePetAsync(this ISwaggerPetstore operations, long id, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeletePetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false);
            }

    }
}

//-----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//     contact jonas.syrstad@evry.com/jonas.syrstad@dnvgl.com for support and help with the tool
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Linq;
using Newtonsoft.Json;
using Stardust.Interstellar;
using Stardust.Interstellar.ConfigurationReader;
using Stardust.Particles;

namespace AuthenticationTestSite.App_Start
{
	public static class ConfigurationExtensions
	{
		public static ConfigurationSettings GetConfiguration(this IRuntime extendedItem)
		{
			return ConfigurationSettings.Current;
		}
		public static AppSettings AppSettings(this IRuntime extendedItem)
		{
			return ConfigurationSettings.Current.AppSettings;
		}
		public static Environment Environment(this IRuntime extendedItem)
		{
			return ConfigurationSettings.Current.Environment;
		}
		public static ServiceHosts ServiceHosts(this IRuntime extendedItem)
		{
			return ConfigurationSettings.Current.ServiceHosts;
		}
	}

	public partial class ConfigurationSettings
	{
		static ConfigurationSettings _current;
		public static ConfigurationSettings Current
		{
			get
			{
				if(_current==null)
				{
					_current=new ConfigurationSettings();
				}
				return _current;
			}
		}
		private AppSettings appSettings = new AppSettings();
		public AppSettings AppSettings
		{
			get
			{
				return appSettings;
			}
		}
		private Environment environment = new Environment();
		public Environment Environment
		{
			get
			{
				return environment;
			}
		}
		private ServiceHosts serviceHosts = new ServiceHosts();
		public ServiceHosts ServiceHosts
		{
			get
			{
				return serviceHosts;
			}
		}
		private Services services = new Services();
		public Services Services
		{
			get
			{
				return services;
			}
		}
	}

	public partial class AppSettings
	{
		internal AppSettings() {}
		public string ConfigSetName
		{
			get
			{
				return ConfigurationManagerHelper.GetValueOnKey("configSet");
			}
		}
		public string Environment
		{
			get
			{
				return ConfigurationManagerHelper.GetValueOnKey("environment");
			}
		}
		public string ServiceHostName
		{
			get
			{
				return ConfigurationManagerHelper.GetValueOnKey("serviceName");
			}
		}
		public string datacenter
		{
			get
			{
				var value = ConfigurationManagerHelper.GetValueOnKey("dataCenterConfigKeyName");
				if(value.IsNullOrWhiteSpace())
				{
					return ConfigurationManagerHelper.GetValueOnKey("dataCenterName");
				}
				else
				{
					return value;
				}
			}
		}
		public string ConfigurationServiceUrl
		{
			get
			{
				return ConfigurationManagerHelper.GetValueOnKey("stardust.configLocation");
			}
		}
	}

	public partial class Environment
	{
		[JsonIgnore]
		public String ServiceAccountName
		{
			get
			{
				var _ServiceAccountName = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetConfigParameter("ServiceAccountName");
				if(string.IsNullOrEmpty(_ServiceAccountName))
				{
					return string.Empty;
				}
				else
				{
					return _ServiceAccountName;
				}
			}
		}
		public String Administrators
		{
			get
			{
				var _Administrators = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetConfigParameter("Administrators");
				if(string.IsNullOrEmpty(_Administrators))
				{
					return string.Empty;
				}
				else
				{
					return _Administrators;
				}
			}
		}
		public String limitImportSet
		{
			get
			{
				var _limitImportSet = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetConfigParameter("limitImportSet");
				if(string.IsNullOrEmpty(_limitImportSet))
				{
					return string.Empty;
				}
				else
				{
					return _limitImportSet;
				}
			}
		}
		[JsonIgnore]
		public String intweReplicationBusKey
		{
			get
			{
				var _intweReplicationBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("intwe-ReplicationBusKey");
				if(string.IsNullOrEmpty(_intweReplicationBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _intweReplicationBusKey;
				}
			}
		}
		[JsonIgnore]
		public String svcweReplicationBusKey
		{
			get
			{
				var _svcweReplicationBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("svcwe-ReplicationBusKey");
				if(string.IsNullOrEmpty(_svcweReplicationBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _svcweReplicationBusKey;
				}
			}
		}
		[JsonIgnore]
		public String svcseaDocumentDbKey
		{
			get
			{
				var _svcseaDocumentDbKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("svcsea-DocumentDbKey");
				if(string.IsNullOrEmpty(_svcseaDocumentDbKey))
				{
					return string.Empty;
				}
				else
				{
					return _svcseaDocumentDbKey;
				}
			}
		}
		[JsonIgnore]
		public String svcweDocumentDbKey
		{
			get
			{
				var _svcweDocumentDbKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("svcwe-DocumentDbKey");
				if(string.IsNullOrEmpty(_svcweDocumentDbKey))
				{
					return string.Empty;
				}
				else
				{
					return _svcweDocumentDbKey;
				}
			}
		}
		[JsonIgnore]
		public String europeDocumentDbKey
		{
			get
			{
				var _europeDocumentDbKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("europe-DocumentDbKey");
				if(string.IsNullOrEmpty(_europeDocumentDbKey))
				{
					return string.Empty;
				}
				else
				{
					return _europeDocumentDbKey;
				}
			}
		}
		[JsonIgnore]
		public String europeReplicationBusKey
		{
			get
			{
				var _europeReplicationBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("europe-ReplicationBusKey");
				if(string.IsNullOrEmpty(_europeReplicationBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _europeReplicationBusKey;
				}
			}
		}
		[JsonIgnore]
		public String svcweServiceBusKey
		{
			get
			{
				var _svcweServiceBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("svcwe-ServiceBusKey");
				if(string.IsNullOrEmpty(_svcweServiceBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _svcweServiceBusKey;
				}
			}
		}
		[JsonIgnore]
		public String ServiceAccountPassword
		{
			get
			{
				var _ServiceAccountPassword = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("ServiceAccountPassword");
				if(string.IsNullOrEmpty(_ServiceAccountPassword))
				{
					return string.Empty;
				}
				else
				{
					return _ServiceAccountPassword;
				}
			}
		}
		[JsonIgnore]
		public String EnableOAMIntegration
		{
			get
			{
				var _EnableOAMIntegration = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("EnableOAMIntegration");
				if(string.IsNullOrEmpty(_EnableOAMIntegration))
				{
					return string.Empty;
				}
				else
				{
					return _EnableOAMIntegration;
				}
			}
		}
		[JsonIgnore]
		public String intweDocumentDbKey
		{
			get
			{
				var _intweDocumentDbKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("intwe-DocumentDbKey");
				if(string.IsNullOrEmpty(_intweDocumentDbKey))
				{
					return string.Empty;
				}
				else
				{
					return _intweDocumentDbKey;
				}
			}
		}
		[JsonIgnore]
		public String svcseaServiceBusKey
		{
			get
			{
				var _svcseaServiceBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("svcsea-ServiceBusKey");
				if(string.IsNullOrEmpty(_svcseaServiceBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _svcseaServiceBusKey;
				}
			}
		}
		[JsonIgnore]
		public String europeServiceBusKey
		{
			get
			{
				var _europeServiceBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("europe-ServiceBusKey");
				if(string.IsNullOrEmpty(_europeServiceBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _europeServiceBusKey;
				}
			}
		}
		[JsonIgnore]
		public String intweServiceBusKey
		{
			get
			{
				var _intweServiceBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("intwe-ServiceBusKey");
				if(string.IsNullOrEmpty(_intweServiceBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _intweServiceBusKey;
				}
			}
		}
		[JsonIgnore]
		public String svcseaReplicationBusKey
		{
			get
			{
				var _svcseaReplicationBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("svcsea-ReplicationBusKey");
				if(string.IsNullOrEmpty(_svcseaReplicationBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _svcseaReplicationBusKey;
				}
			}
		}
		[JsonIgnore]
		public String asiaDocumentDbKey
		{
			get
			{
				var _asiaDocumentDbKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("asia-DocumentDbKey");
				if(string.IsNullOrEmpty(_asiaDocumentDbKey))
				{
					return string.Empty;
				}
				else
				{
					return _asiaDocumentDbKey;
				}
			}
		}
		[JsonIgnore]
		public String asiaReplicationBusKey
		{
			get
			{
				var _asiaReplicationBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("asia-ReplicationBusKey");
				if(string.IsNullOrEmpty(_asiaReplicationBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _asiaReplicationBusKey;
				}
			}
		}
		[JsonIgnore]
		public String dnvglServiceBusKey
		{
			get
			{
				var _dnvglServiceBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("dnvgl-ServiceBusKey");
				if(string.IsNullOrEmpty(_dnvglServiceBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _dnvglServiceBusKey;
				}
			}
		}
		[JsonIgnore]
		public String dnvglDocumentDbKey
		{
			get
			{
				var _dnvglDocumentDbKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("dnvgl-DocumentDbKey");
				if(string.IsNullOrEmpty(_dnvglDocumentDbKey))
				{
					return string.Empty;
				}
				else
				{
					return _dnvglDocumentDbKey;
				}
			}
		}
		[JsonIgnore]
		public String dnvglReplicationBusKey
		{
			get
			{
				var _dnvglReplicationBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("dnvgl-ReplicationBusKey");
				if(string.IsNullOrEmpty(_dnvglReplicationBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _dnvglReplicationBusKey;
				}
			}
		}
		[JsonIgnore]
		public String asiaServiceBusKey
		{
			get
			{
				var _asiaServiceBusKey = RuntimeFactory.Current.Context.GetEnvironmentConfiguration().GetSecureConfigParameter("asia-ServiceBusKey");
				if(string.IsNullOrEmpty(_asiaServiceBusKey))
				{
					return string.Empty;
				}
				else
				{
					return _asiaServiceBusKey;
				}
			}
		}
	}

	public partial class ServiceHosts
	{
		private backgroundTasksServiceHost _backgroundtasks = new backgroundTasksServiceHost();
		public backgroundTasksServiceHost backgroundTasks
		{
			get
			{
				return _backgroundtasks;
			}
		}
		public partial class backgroundTasksServiceHost
		{
		}

		private documentDbServiceHost _documentdb = new documentDbServiceHost();
		public documentDbServiceHost documentDb
		{
			get
			{
				return _documentdb;
			}
		}
		public partial class documentDbServiceHost
		{
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("documentDb").GetConfigParameter("datacenterInfo");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		public String databaseMode
		{
			get
			{
				var _databaseMode = RuntimeFactory.Current.Context.GetServiceConfiguration("documentDb").GetConfigParameter("databaseMode");
				if(string.IsNullOrEmpty(_databaseMode))
				{
					return string.Empty;
				}
				else
				{
					return _databaseMode;
				}
			}
		}
		}

		private notificationBusServiceHost _notificationbus = new notificationBusServiceHost();
		public notificationBusServiceHost notificationBus
		{
			get
			{
				return _notificationbus;
			}
		}
		public partial class notificationBusServiceHost
		{
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("notificationBus").GetConfigParameter("datacenterInfo");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		}

		private replicationBusServiceHost _replicationbus = new replicationBusServiceHost();
		public replicationBusServiceHost replicationBus
		{
			get
			{
				return _replicationbus;
			}
		}
		public partial class replicationBusServiceHost
		{
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("replicationBus").GetConfigParameter("datacenterInfo");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		}

		private WebServiceHost _web = new WebServiceHost();
		public WebServiceHost Web
		{
			get
			{
				return _web;
			}
		}
		public partial class WebServiceHost
		{
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("Web").GetConfigParameter("datacenterInfo");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		public String Address
		{
			get
			{
				var _Address = RuntimeFactory.Current.Context.GetServiceConfiguration("Web").GetConfigParameter("Address");
				if(string.IsNullOrEmpty(_Address))
				{
					return string.Empty;
				}
				else
				{
					return _Address;
				}
			}
		}
		}

		private documentDbIntegrationServiceHost _documentdbintegration = new documentDbIntegrationServiceHost();
		public documentDbIntegrationServiceHost documentDbIntegration
		{
			get
			{
				return _documentdbintegration;
			}
		}
		public partial class documentDbIntegrationServiceHost
		{
		public String databaseMode
		{
			get
			{
				var _databaseMode = RuntimeFactory.Current.Context.GetServiceConfiguration("documentDbIntegration").GetConfigParameter("databaseMode");
				if(string.IsNullOrEmpty(_databaseMode))
				{
					return string.Empty;
				}
				else
				{
					return _databaseMode;
				}
			}
		}
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("documentDbIntegration").GetConfigParameter("datacenterInfo");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		}

		private tersServiceServiceHost _tersservice = new tersServiceServiceHost();
		public tersServiceServiceHost tersService
		{
			get
			{
				return _tersservice;
			}
		}
		public partial class tersServiceServiceHost
		{
		public String datacenters
		{
			get
			{
				var _datacenters = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("datacenters");
				if(string.IsNullOrEmpty(_datacenters))
				{
					return string.Empty;
				}
				else
				{
					return _datacenters;
				}
			}
		}
		public String tersServiceReplicationBus
		{
			get
			{
				var _tersServiceReplicationBus = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("tersService-ReplicationBus");
				if(string.IsNullOrEmpty(_tersServiceReplicationBus))
				{
					return string.Empty;
				}
				else
				{
					return _tersServiceReplicationBus;
				}
			}
		}
		public String documentDbPerformanceLevel
		{
			get
			{
				var _documentDbPerformanceLevel = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("documentDbPerformanceLevel");
				if(string.IsNullOrEmpty(_documentDbPerformanceLevel))
				{
					return string.Empty;
				}
				else
				{
					return _documentDbPerformanceLevel;
				}
			}
		}
		public String databaseHostName
		{
			get
			{
				var _databaseHostName = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter(" databaseHostName");
				if(string.IsNullOrEmpty(_databaseHostName))
				{
					return string.Empty;
				}
				else
				{
					return _databaseHostName;
				}
			}
		}
		public String Address
		{
			get
			{
				var _Address = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("Address");
				if(string.IsNullOrEmpty(_Address))
				{
					return string.Empty;
				}
				else
				{
					return _Address;
				}
			}
		}
		public String partitionSize
		{
			get
			{
				var _partitionSize = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("partitionSize");
				if(string.IsNullOrEmpty(_partitionSize))
				{
					return string.Empty;
				}
				else
				{
					return _partitionSize;
				}
			}
		}
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("datacenterInfo ");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		public String tersServiceDocumentDb
		{
			get
			{
				var _tersServiceDocumentDb = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("tersService-DocumentDb");
				if(string.IsNullOrEmpty(_tersServiceDocumentDb))
				{
					return string.Empty;
				}
				else
				{
					return _tersServiceDocumentDb;
				}
			}
		}
		public String tersServiceServiceBus
		{
			get
			{
				var _tersServiceServiceBus = RuntimeFactory.Current.Context.GetServiceConfiguration("tersService").GetConfigParameter("tersService-ServiceBus");
				if(string.IsNullOrEmpty(_tersServiceServiceBus))
				{
					return string.Empty;
				}
				else
				{
					return _tersServiceServiceBus;
				}
			}
		}
		}

		private tersBackendServiceServiceHost _tersbackendservice = new tersBackendServiceServiceHost();
		public tersBackendServiceServiceHost tersBackendService
		{
			get
			{
				return _tersbackendservice;
			}
		}
		public partial class tersBackendServiceServiceHost
		{
		public String AzureStorageConnectionString
		{
			get
			{
				var _AzureStorageConnectionString = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("AzureStorageConnectionString");
				if(string.IsNullOrEmpty(_AzureStorageConnectionString))
				{
					return string.Empty;
				}
				else
				{
					return _AzureStorageConnectionString;
				}
			}
		}
		public String datacenters
		{
			get
			{
				var _datacenters = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("datacenters");
				if(string.IsNullOrEmpty(_datacenters))
				{
					return string.Empty;
				}
				else
				{
					return _datacenters;
				}
			}
		}
		public String BackOfficeConnectivityIssueEmailing
		{
			get
			{
				var _BackOfficeConnectivityIssueEmailing = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("BackOfficeConnectivityIssueEmailing");
				if(string.IsNullOrEmpty(_BackOfficeConnectivityIssueEmailing))
				{
					return string.Empty;
				}
				else
				{
					return _BackOfficeConnectivityIssueEmailing;
				}
			}
		}
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("datacenterInfo ");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		public String tersBackendServiceReplicationBus
		{
			get
			{
				var _tersBackendServiceReplicationBus = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("tersBackendService-ReplicationBus");
				if(string.IsNullOrEmpty(_tersBackendServiceReplicationBus))
				{
					return string.Empty;
				}
				else
				{
					return _tersBackendServiceReplicationBus;
				}
			}
		}
		public String documentDbPerformanceLevel
		{
			get
			{
				var _documentDbPerformanceLevel = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("documentDbPerformanceLevel");
				if(string.IsNullOrEmpty(_documentDbPerformanceLevel))
				{
					return string.Empty;
				}
				else
				{
					return _documentDbPerformanceLevel;
				}
			}
		}
		public String tersBackendServiceDocumentDb
		{
			get
			{
				var _tersBackendServiceDocumentDb = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("tersBackendService-DocumentDb");
				if(string.IsNullOrEmpty(_tersBackendServiceDocumentDb))
				{
					return string.Empty;
				}
				else
				{
					return _tersBackendServiceDocumentDb;
				}
			}
		}
		public String databaseHostName
		{
			get
			{
				var _databaseHostName = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("databaseHostName");
				if(string.IsNullOrEmpty(_databaseHostName))
				{
					return string.Empty;
				}
				else
				{
					return _databaseHostName;
				}
			}
		}
		public String Address
		{
			get
			{
				var _Address = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("Address");
				if(string.IsNullOrEmpty(_Address))
				{
					return string.Empty;
				}
				else
				{
					return _Address;
				}
			}
		}
		public String tersBackendServiceServiceBus
		{
			get
			{
				var _tersBackendServiceServiceBus = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("tersBackendService-ServiceBus");
				if(string.IsNullOrEmpty(_tersBackendServiceServiceBus))
				{
					return string.Empty;
				}
				else
				{
					return _tersBackendServiceServiceBus;
				}
			}
		}
		public String partitionSize
		{
			get
			{
				var _partitionSize = RuntimeFactory.Current.Context.GetServiceConfiguration("tersBackendService").GetConfigParameter("partitionSize");
				if(string.IsNullOrEmpty(_partitionSize))
				{
					return string.Empty;
				}
				else
				{
					return _partitionSize;
				}
			}
		}
		}

		private OracleRestServiceHost _oraclerest = new OracleRestServiceHost();
		public OracleRestServiceHost OracleRest
		{
			get
			{
				return _oraclerest;
			}
		}
		public partial class OracleRestServiceHost
		{
		public String Address
		{
			get
			{
				var _Address = RuntimeFactory.Current.Context.GetServiceConfiguration("OracleRest").GetConfigParameter("Address");
				if(string.IsNullOrEmpty(_Address))
				{
					return string.Empty;
				}
				else
				{
					return _Address;
				}
			}
		}
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("OracleRest").GetConfigParameter("datacenterInfo ");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		}

		private OracleSoapServiceHost _oraclesoap = new OracleSoapServiceHost();
		public OracleSoapServiceHost OracleSoap
		{
			get
			{
				return _oraclesoap;
			}
		}
		public partial class OracleSoapServiceHost
		{
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("OracleSoap").GetConfigParameter("datacenterInfo");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		public String ClientCertificateThumbprint
		{
			get
			{
				var _ClientCertificateThumbprint = RuntimeFactory.Current.Context.GetServiceConfiguration("OracleSoap").GetConfigParameter("ClientCertificateThumbprint");
				if(string.IsNullOrEmpty(_ClientCertificateThumbprint))
				{
					return string.Empty;
				}
				else
				{
					return _ClientCertificateThumbprint;
				}
			}
		}
		public String OracleEnvironment
		{
			get
			{
				var _OracleEnvironment = RuntimeFactory.Current.Context.GetServiceConfiguration("OracleSoap").GetConfigParameter("OracleEnvironment");
				if(string.IsNullOrEmpty(_OracleEnvironment))
				{
					return string.Empty;
				}
				else
				{
					return _OracleEnvironment;
				}
			}
		}
		public String ServiceCertificateSubject
		{
			get
			{
				var _ServiceCertificateSubject = RuntimeFactory.Current.Context.GetServiceConfiguration("OracleSoap").GetConfigParameter("ServiceCertificateSubject");
				if(string.IsNullOrEmpty(_ServiceCertificateSubject))
				{
					return string.Empty;
				}
				else
				{
					return _ServiceCertificateSubject;
				}
			}
		}
		public String Address
		{
			get
			{
				var _Address = RuntimeFactory.Current.Context.GetServiceConfiguration("OracleSoap").GetConfigParameter("Address");
				if(string.IsNullOrEmpty(_Address))
				{
					return string.Empty;
				}
				else
				{
					return _Address;
				}
			}
		}
		}

		private BizTalkServiceHost _biztalk = new BizTalkServiceHost();
		public BizTalkServiceHost BizTalk
		{
			get
			{
				return _biztalk;
			}
		}
		public partial class BizTalkServiceHost
		{
		public String Address
		{
			get
			{
				var _Address = RuntimeFactory.Current.Context.GetServiceConfiguration("BizTalk").GetConfigParameter("Address");
				if(string.IsNullOrEmpty(_Address))
				{
					return string.Empty;
				}
				else
				{
					return _Address;
				}
			}
		}
		}

		private powershellServiceHost _powershell = new powershellServiceHost();
		public powershellServiceHost powershell
		{
			get
			{
				return _powershell;
			}
		}
		public partial class powershellServiceHost
		{
		public String datacenterInfo
		{
			get
			{
				var _datacenterInfo = RuntimeFactory.Current.Context.GetServiceConfiguration("powershell").GetConfigParameter("datacenterInfo");
				if(string.IsNullOrEmpty(_datacenterInfo))
				{
					return string.Empty;
				}
				else
				{
					return _datacenterInfo;
				}
			}
		}
		}

	}

	public partial class Services
	{
		private EndpointConfig _indexerservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("IndexerService");
		public EndpointConfig IndexerService
		{
			get
			{
				return _indexerservice;
			}
		}
		private EndpointConfig _oracleabsencecrudservicesoap = RuntimeFactory.Current.Context.GetEndpointConfiguration("OracleAbsenceCrudServiceSoap");
		public EndpointConfig OracleAbsenceCrudServiceSoap
		{
			get
			{
				return _oracleabsencecrudservicesoap;
			}
		}
		private EndpointConfig _biztalkoracleadapterservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BiztalkOracleAdapterService");
		public EndpointConfig BiztalkOracleAdapterService
		{
			get
			{
				return _biztalkoracleadapterservice;
			}
		}
		private EndpointConfig _oracletimedepositservicerest = RuntimeFactory.Current.Context.GetEndpointConfiguration("OracleTimeDepositServiceRest");
		public EndpointConfig OracleTimeDepositServiceRest
		{
			get
			{
				return _oracletimedepositservicerest;
			}
		}
		private EndpointConfig _searchservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("SearchService");
		public EndpointConfig SearchService
		{
			get
			{
				return _searchservice;
			}
		}
		private EndpointConfig _taskhost = RuntimeFactory.Current.Context.GetEndpointConfiguration("TaskHost");
		public EndpointConfig TaskHost
		{
			get
			{
				return _taskhost;
			}
		}
		private EndpointConfig _oracleabsencelookupservicerest = RuntimeFactory.Current.Context.GetEndpointConfiguration("OracleAbsenceLookupServiceRest");
		public EndpointConfig OracleAbsenceLookupServiceRest
		{
			get
			{
				return _oracleabsencelookupservicerest;
			}
		}
		private EndpointConfig _backendpostdeploymentservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BackendPostDeploymentService");
		public EndpointConfig BackendPostDeploymentService
		{
			get
			{
				return _backendpostdeploymentservice;
			}
		}
		private EndpointConfig _expenseservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("ExpenseService");
		public EndpointConfig ExpenseService
		{
			get
			{
				return _expenseservice;
			}
		}
		private EndpointConfig _userclientservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("UserClientService");
		public EndpointConfig UserClientService
		{
			get
			{
				return _userclientservice;
			}
		}
		private EndpointConfig _searchnotifications = RuntimeFactory.Current.Context.GetEndpointConfiguration("SearchNotifications");
		public EndpointConfig SearchNotifications
		{
			get
			{
				return _searchnotifications;
			}
		}
		private EndpointConfig _backendabsenceservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BackendAbsenceService");
		public EndpointConfig BackendAbsenceService
		{
			get
			{
				return _backendabsenceservice;
			}
		}
		private EndpointConfig _expensemobileservice_porttype = RuntimeFactory.Current.Context.GetEndpointConfiguration("ExpenseMobileService_PortType");
		public EndpointConfig ExpenseMobileService_PortType
		{
			get
			{
				return _expensemobileservice_porttype;
			}
		}
		private EndpointConfig _oracleabsencelookupservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("OracleAbsenceLookupService");
		public EndpointConfig OracleAbsenceLookupService
		{
			get
			{
				return _oracleabsencelookupservice;
			}
		}
		private EndpointConfig _timesheetservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("TimeSheetService");
		public EndpointConfig TimeSheetService
		{
			get
			{
				return _timesheetservice;
			}
		}
		private EndpointConfig _biztalkmasterdataservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BiztalkMasterdataService");
		public EndpointConfig BiztalkMasterdataService
		{
			get
			{
				return _biztalkmasterdataservice;
			}
		}
		private EndpointConfig _oracletimedepositservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("OracleTimeDepositService");
		public EndpointConfig OracleTimeDepositService
		{
			get
			{
				return _oracletimedepositservice;
			}
		}
		private EndpointConfig _biztalkauthservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BiztalkAuthService");
		public EndpointConfig BiztalkAuthService
		{
			get
			{
				return _biztalkauthservice;
			}
		}
		private EndpointConfig _backendtimesheetservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BackendTimeSheetService");
		public EndpointConfig BackendTimeSheetService
		{
			get
			{
				return _backendtimesheetservice;
			}
		}
		private EndpointConfig _backendexpenseservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BackendExpenseService");
		public EndpointConfig BackendExpenseService
		{
			get
			{
				return _backendexpenseservice;
			}
		}
		private EndpointConfig _backenduserclientservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("BackendUserClientService");
		public EndpointConfig BackendUserClientService
		{
			get
			{
				return _backenduserclientservice;
			}
		}
		private EndpointConfig _expenseupdatednotificationservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("ExpenseUpdatedNotificationService");
		public EndpointConfig ExpenseUpdatedNotificationService
		{
			get
			{
				return _expenseupdatednotificationservice;
			}
		}
		private EndpointConfig _securebiztalktestservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("SecureBiztalkTestService");
		public EndpointConfig SecureBiztalkTestService
		{
			get
			{
				return _securebiztalktestservice;
			}
		}
		private EndpointConfig _masterdataservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("MasterDataService");
		public EndpointConfig MasterDataService
		{
			get
			{
				return _masterdataservice;
			}
		}
		private EndpointConfig _oracle_restmobileexpense = RuntimeFactory.Current.Context.GetEndpointConfiguration("Oracle_RestMobileExpense");
		public EndpointConfig Oracle_RestMobileExpense
		{
			get
			{
				return _oracle_restmobileexpense;
			}
		}
		private EndpointConfig _absenceservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("AbsenceService");
		public EndpointConfig AbsenceService
		{
			get
			{
				return _absenceservice;
			}
		}
		private EndpointConfig _postdeploymentservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("PostDeploymentService");
		public EndpointConfig PostDeploymentService
		{
			get
			{
				return _postdeploymentservice;
			}
		}
		private EndpointConfig _tersservice_replicationbus = RuntimeFactory.Current.Context.GetEndpointConfiguration("tersService_replicationBus");
		public EndpointConfig tersService_replicationBus
		{
			get
			{
				return _tersservice_replicationbus;
			}
		}
		private EndpointConfig _oracleabsencecrudservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("OracleAbsenceCrudService");
		public EndpointConfig OracleAbsenceCrudService
		{
			get
			{
				return _oracleabsencecrudservice;
			}
		}
		private EndpointConfig _secureresttestservice = RuntimeFactory.Current.Context.GetEndpointConfiguration("SecureRestTestService");
		public EndpointConfig SecureRestTestService
		{
			get
			{
				return _secureresttestservice;
			}
		}
	}

}

